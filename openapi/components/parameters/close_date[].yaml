# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# 11. Ensure every schema property has a `type` and if applicable a `format`; infer missing types where possible.
# 12. Recommend stronger type hints (e.g., `integer` vs `string`, `date-time` vs `string`) where obvious.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, reuse, and typing.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

name: close_date[]
in: query
description: |
  Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.

  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`

  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.

  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`

  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned.
required: false
schema:
  type: string
  enum:
    - '>DATE'
    - '>=DATE'
    - =DATE
    - <=DATE
    - <DATE
