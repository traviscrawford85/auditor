# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, and reuse.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

type: object
properties:
  id:
    type: integer
    format: int64
    description: Unique identifier for the *ReportSchedule*
  etag:
    type: string
    description: ETag for the *ReportSchedule*
  time_of_day:
    type: string
    format: date-time
    description: What time the Report Schedule is run
  frequency:
    type: string
    enum:
      - daily
      - weekly
      - monthly
    description: How often the Report Schedule is run
  days_of_week:
    type: array
    items:
      type: integer
      format: int32
    description: >-
      If the frequency is weekly, which days of the week the Report Schedule is
      run. Values are 0 to 6, representing Sunday to Saturday.
  day_of_month:
    type: integer
    format: int32
    description: >-
      If the frequency is monthly, which day of the month the Report Schedule is
      run. 32 is used to represent the last day of the month.
  status:
    type: string
    enum:
      - initial
      - queued
      - processing
      - failed
      - completed
    description: The status of the Report Schedule
  status_updated_at:
    type: string
    format: date-time
    description: When the status of the Report Schedule was last updated
  next_scheduled_date:
    type: string
    format: date-time
    description: The next time the Report Schedule should run
  time_zone:
    type: string
    description: >-
      Used in conjunction with `time_of_day` to determine when the Report
      Schedule should run
  report_preset_id:
    type: integer
    format: int64
    description: >-
      The unique identifier of the Report Preset to use when generating the
      scheduled report
  created_at:
    type: string
    format: date-time
    description: The time the *ReportSchedule* was created (as a ISO-8601 timestamp)
  updated_at:
    type: string
    format: date-time
    description: The time the *ReportSchedule* was last updated (as a ISO-8601 timestamp)
  every_no_of_months:
    type: integer
    format: int32
    description: >-
      If the frequency is monthly, how many months between each run of the
      Report Schedule
  effective_from:
    type: string
    format: date
    description: The date the Report Schedule will become enabled (a ISO-8601 date)
