# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, and reuse.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

type: object
properties:
  id:
    type: integer
    format: int64
    description: Unique identifier for the *Activity*
  etag:
    type: string
    description: ETag for the *Activity*
  type:
    type: string
    enum:
      - TimeEntry
      - ExpenseEntry
      - HardCostEntry
      - SoftCostEntry
    description: The type of the *Activity*
  date:
    type: string
    format: date
    description: The date the *Activity* was performed (as a ISO-8601 date)
  quantity_in_hours:
    type: number
    format: double
    description: The number of hours the TimeEntry took.
  rounded_quantity_in_hours:
    type: number
    format: double
    description: |
      The number of hours rounded accordingly to the billing settings.
      The rounded value is used to calculate the total.
  quantity:
    type: number
    format: double
    description: |
      The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.

      **Version <= 4.0.3:**
      The number of hours the TimeEntry took.

      **Latest version:**
      The number of seconds the TimeEntry took.
  rounded_quantity:
    type: number
    format: double
    description: |
      The field is applicable to time entries only.

      **Version <= 4.0.3:**
      The number of hours rounded accordingly to the billing settings.
      The rounded value is used to calculate the total.

      **Latest version:**
      The number of seconds rounded accordingly to the billing settings.
      The rounded value is used to calculate the total.
  quantity_redacted:
    type: boolean
    description: >
      Is `true` if any of the following fields are redacted:

      `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`,
      `quantity_in_hours`, `total`, `non_billable_total`
  price:
    type: number
    format: double
    description: The hourly or flat rate of the *Activity*
  note:
    type: string
    description: The details about the *Activity*
  flat_rate:
    type: boolean
    description: Whether the *Activity* is a flat rate
  billed:
    type: boolean
    description: >-
      Whether the *Activity* has been added to an active bill that is in the
      state of `awaiting_payment` or `paid`
  on_bill:
    type: boolean
    description: >-
      Whether the *Activity* has been added to an active bill that is in the
      state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`
  total:
    type: number
    format: double
    description: The total cost of draft, billable and billed items in the *Activity*
  contingency_fee:
    type: boolean
    description: Whether or not the *Activity* is a contingency fee
  created_at:
    type: string
    format: date-time
    description: The time the *Activity* was created (as a ISO-8601 timestamp)
  updated_at:
    type: string
    format: date-time
    description: The time the *Activity* was last updated (as a ISO-8601 timestamp)
  reference:
    type: string
    description: A check reference for a HardCostEntry.
  non_billable:
    type: boolean
    description: Whether the *Activity* is non-billable
  non_billable_total:
    type: number
    format: double
    description: The total cost of non-billable items in the *Activity*
  no_charge:
    type: boolean
    description: Whether the non-billable *Activity* is shown on the bill.
  tax_setting:
    type: string
    enum:
      - no_tax
      - tax_1_only
      - tax_2_only
      - tax_1_and_tax_2
    description: >-
      The option denoting whether primary tax, secondary tax, or both is applied
      to an expense entry.
  currency:
    type: object
    description: The currency of the *Activity*
