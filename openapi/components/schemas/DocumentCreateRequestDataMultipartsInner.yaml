# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# 11. Ensure every schema property has a `type` and if applicable a `format`; infer missing types where possible.
# 12. Recommend stronger type hints (e.g., `integer` vs `string`, `date-time` vs `string`) where obvious.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, reuse, and typing.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

UnnamedSchema:
  description: DocumentCreateRequestDataMultipartsInner
  properties:
    part_number:
      description: 'The part number of multipart upload. It must be an integer between
        1 to 10,000, inclusive.  Multipart upload supports upload a single file as
        a set of parts. Each part is a contiguous portion of the data. A `part_number`
        uniquely identifies a part and also defines its position within the document
        being uploaded. Each part must be at least 5 MB in size, except the last part.
        There is no minimum size limit on the last part.  The URLs of multipart upload
        are returned in the field, `put_url`, with the corresponding `multipart`  The
        API handles maximum 50 `multiparts` in one request. If the upload is split
        to more than 50 parts, make a PUT request with `fully_uploaded` equal to `false`,
        and another set of part numbers. '
      title: Part Number
      type: integer
    content_length:
      description: The size of the part of the upload file in bytes.
      title: Content Length
      type: string
    content_md5:
      anyOf:
      - type: string
      - type: 'null'
      default: null
      description: The base64-encoded 128-bit MD5 digest of the part data. This header
        can be used as a message integrity check to verify that the part data is the
        same data that was originally sent. Although it is optional, we recommend
        using the Content-MD5 mechanism as an end-to-end integrity check.
      title: Content Md5
  required:
  - part_number
  - content_length
  title: DocumentCreateRequestDataMultipartsInner
  type: object
