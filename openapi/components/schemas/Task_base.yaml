# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, and reuse.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

type: object
properties:
  id:
    type: integer
    format: int64
    description: Unique identifier for the *Task*
  etag:
    type: string
    description: ETag for the *Task*
  name:
    type: string
    description: The name of the *Task*
  status:
    type: string
    enum:
      - pending
      - in_progress
      - in_review
      - complete
    description: >-
      Status of the *Task*. (Note that users without advanced tasks can only
      have either complete or pending)
  description:
    type: string
    description: >-
      A detailed description of the *Task*. This Task supports rich text when
      setting the field `description_text_type` to `rich_text`. With supported
      tags such as `<a>`, `<b>`, `<br>`, `<div>`, `<em>`, `<i>` `<li>`, `<ol>`,
      `<p>`, `<s>`, `<strong>`, `<u>` and `<ul>`. This Task also supports
      attributes such as `href`, `rel`, `type`, and `target`.
  description_text_type:
    type: string
    enum:
      - plain_text
      - rich_text
    description: The text type of the *Task*
  priority:
    type: string
    enum:
      - High
      - Normal
      - Low
    description: The priority of the *Task*
  due_at:
    type: string
    format: date
    description: The date the *Task* is due (as a ISO-8601 date)
  permission:
    type: string
    description: The permission of the *Task*
  completed_at:
    type: string
    format: date-time
    description: The time the *Task* was completed (as a ISO-8601 timestamp)
  notify_completion:
    type: boolean
    description: Whether to notify the assigner of the task's completion
  statute_of_limitations:
    type: boolean
    description: Whether the task is a statute of limitations
  time_estimated:
    type: integer
    format: int32
    description: Time the *Task* should take to complete
  created_at:
    type: string
    format: date-time
    description: The time the *Task* was created (as a ISO-8601 timestamp)
  updated_at:
    type: string
    format: date-time
    description: The time the *Task* was last updated (as a ISO-8601 timestamp)
  time_entries_count:
    type: integer
    format: int32
    description: The number of time entries associated with this task
