# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# 11. Ensure every schema property has a `type` and if applicable a `format`; infer missing types where possible.
# 12. Recommend stronger type hints (e.g., `integer` vs `string`, `date-time` vs `string`) where obvious.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, reuse, and typing.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

$defs:
  Report:
    description: Report
    properties:
      id:
        anyOf:
        - type: integer
        - type: 'null'
        default: null
        description: Unique identifier for the *Report*
        title: Id
      etag:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: ETag for the *Report*
        title: Etag
      name:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: A specified name for the report
        title: Name
      state:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: The current state of the report
        title: State
      kind:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: The kind of report to generate
        title: Kind
      format:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: The requested format of the report
        title: Format
      progress:
        anyOf:
        - type: integer
        - type: 'null'
        default: null
        description: The integer percentage of how complete the report is.
        title: Progress
      created_at:
        anyOf:
        - format: date-time
          type: string
        - type: 'null'
        default: null
        description: The time the *Report* was created (as a ISO-8601 timestamp)
        title: Created At
      updated_at:
        anyOf:
        - format: date-time
          type: string
        - type: 'null'
        default: null
        description: The time the *Report* was last updated (as a ISO-8601 timestamp)
        title: Updated At
      category:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: The category of the report
        title: Category
      source:
        anyOf:
        - type: string
        - type: 'null'
        default: null
        description: The source of the report
        title: Source
    title: Report
    type: object
description: ReportList
properties:
  data:
    description: Report List Response
    items:
      $ref: '#/$defs/Report'
    title: Data
    type: array
required:
- data
title: ReportList
type: object
