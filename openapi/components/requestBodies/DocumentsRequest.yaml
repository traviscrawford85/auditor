# copilot-audit: true
# Description: This file is a modular part of a larger OpenAPI specification for a Clio API integration.
# Objective: Audit this spec segment for completeness, correctness, and consistency with OpenAPI 3.1 standards.
# Tasks:
# 1. Verify valid OpenAPI syntax (YAML structure, keys).
# 2. Confirm all `$ref` targets exist and are reachable (local or shared component references).
# 3. Ensure operationId values are unique, descriptive, and follow the {method}_{resource} pattern.
# 4. Check that requestBody and response schemas use proper `$ref`s and avoid inline duplication.
# 5. Validate that all schemas and components are named clearly and represent their intent.
# 6. Detect and flag unused components under `components.schemas`, `components.responses`, etc.
# 7. Review tag usage for clarity, grouping, and alignment with x-tagGroups (if used).
# 8. Enforce use of standard HTTP methods and response codes (e.g., 200, 201, 400, 404, 422, 500).
# 9. Validate pagination, filtering, and sorting patterns for list endpoints.
# 10. Check that the top-level spec (if root) defines: openapi version, info, servers, paths, components, and tags.
# 11. Ensure every schema property has a `type` and if applicable a `format`; infer missing types where possible.
# 12. Recommend stronger type hints (e.g., `integer` vs `string`, `date-time` vs `string`) where obvious.
# Output:
# - A checklist of errors or improvements, preferably with line references.
# - Suggestions for how to fix or improve structure, naming, reuse, and typing.
#
# NOTE: This file is part of a spec intended to generate a custom Python client using `openapi-python-client`,
# which expects well-formed operationIds and `$ref`s to derive method names and models.

DocumentsRequest:
  description: Request Body for Documents
  content:
    application/json:
      schema:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            properties:
              communication_id:
                type: integer
                format: int64
                description: Related communication record.
              copy_version:
                type: boolean
                description: |-
                  Indicates whether to create a new version with the updated filename on rename. This is intended to handle cases where the document extension has been changed; if the document extension has not changed, no new version will be created.
              document_category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |-
                      The unique identifier for a single DocumentCategory associated with the Document. Use the keyword `null` to specify no association.
              external_properties:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: |-
                        The unique identifier for a single ExternalProperty associated with the Document. The keyword `null` is not valid for this field.
                    name:
                      type: string
                      description: 'The ExternalProperty name. Note: **there is a
                        limit of 5 external_properties per Document**'
                    value:
                      type: string
                      description: The ExternalProperty value.
                    _destroy:
                      type: boolean
                      description: |-
                        The destroy flag. If the flag is set to `true` and the unique identifier of the associated ExternalProperty is present, the ExternalProperty is deleted from the Document.
              fully_uploaded:
                type: boolean
                description: |
                  Indicates whether document is uploaded.

                  When marking the document fully uploaded, it arises errors when:
                  * The file is not successfully uploaded.
                  * Not all the file parts are uploaded.
                  * The document is already marked as fully uploaded.
              multiparts:
                type: array
                items:
                  type: object
                  properties:
                    part_number:
                      type: integer
                      format: int32
                      description: |
                        The part number of multipart upload. It must be an integer between 1 to 10,000, inclusive.

                        Multipart upload supports upload a single file as a set of parts.
                        Each part is a contiguous portion of the data.
                        A `part_number` uniquely identifies a part and also defines its position within the document being uploaded.
                        Each part must be at least 5 MB in size, except the last part.
                        There is no minimum size limit on the last part.

                        The URLs of multipart upload are returned in the field, `put_url`, with the corresponding `multipart`

                        The API handles maximum 50 `multiparts` in one request. If the upload is split to more than 50 parts,
                        make a PUT request with `fully_uploaded` equal to `false`, and another set of part numbers.
                    content_length:
                      type: string
                      description: The size of the part of the upload file in bytes.
                    content_md5:
                      type: string
                      description: |-
                        The base64-encoded 128-bit MD5 digest of the part data. This header can be used as a message integrity check to verify that the part data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check.
              name:
                type: string
                description: Document name.
              parent:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The unique identifier of the parent object.
                  type:
                    type: string
                    enum:
                      - Document
                      - Folder
                      - Contact
                      - Matter
                    description: |
                      Type of parent object:
                      * "Document" represents an existing Clio document. It is specified when you provide a new revision (or document version) to an existing document.
                      * "Folder" represents a specified folder on Clio by folder id. It if specified when you add / move an item to a folder.
                      * "Contact" represents a contact folder on Clio identified by contact id. It is specified when you add / move an item to a contact folder. A contact folder will be created for the specified contact if none exists already.
                      * "Matter" represents a matter folder on Clio identified by matter id. It is specified when you add / move an item to a matter folder.
              received_at:
                type: string
                format: date-time
                description: Date and time the document was received (Expects an ISO-8601
                  timestamp).
              restore:
                type: boolean
                description: Whether or not a trashed Document should be restored.
              uuid:
                type: string
                description: UUID associated with the document version. UUID is required
                  to mark a document fully uploaded.
    application/x-www-form-urlencoded:
      schema:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            properties:
              communication_id:
                type: integer
                format: int64
                description: Related communication record.
              copy_version:
                type: boolean
                description: |-
                  Indicates whether to create a new version with the updated filename on rename. This is intended to handle cases where the document extension has been changed; if the document extension has not changed, no new version will be created.
              document_category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |-
                      The unique identifier for a single DocumentCategory associated with the Document. Use the keyword `null` to specify no association.
              external_properties:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: |-
                        The unique identifier for a single ExternalProperty associated with the Document. The keyword `null` is not valid for this field.
                    name:
                      type: string
                      description: 'The ExternalProperty name. Note: **there is a
                        limit of 5 external_properties per Document**'
                    value:
                      type: string
                      description: The ExternalProperty value.
                    _destroy:
                      type: boolean
                      description: |-
                        The destroy flag. If the flag is set to `true` and the unique identifier of the associated ExternalProperty is present, the ExternalProperty is deleted from the Document.
              fully_uploaded:
                type: boolean
                description: |
                  Indicates whether document is uploaded.

                  When marking the document fully uploaded, it arises errors when:
                  * The file is not successfully uploaded.
                  * Not all the file parts are uploaded.
                  * The document is already marked as fully uploaded.
              multiparts:
                type: array
                items:
                  type: object
                  properties:
                    part_number:
                      type: integer
                      format: int32
                      description: |
                        The part number of multipart upload. It must be an integer between 1 to 10,000, inclusive.

                        Multipart upload supports upload a single file as a set of parts.
                        Each part is a contiguous portion of the data.
                        A `part_number` uniquely identifies a part and also defines its position within the document being uploaded.
                        Each part must be at least 5 MB in size, except the last part.
                        There is no minimum size limit on the last part.

                        The URLs of multipart upload are returned in the field, `put_url`, with the corresponding `multipart`

                        The API handles maximum 50 `multiparts` in one request. If the upload is split to more than 50 parts,
                        make a PUT request with `fully_uploaded` equal to `false`, and another set of part numbers.
                    content_length:
                      type: string
                      description: The size of the part of the upload file in bytes.
                    content_md5:
                      type: string
                      description: |-
                        The base64-encoded 128-bit MD5 digest of the part data. This header can be used as a message integrity check to verify that the part data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check.
              name:
                type: string
                description: Document name.
              parent:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The unique identifier of the parent object.
                  type:
                    type: string
                    enum:
                      - Document
                      - Folder
                      - Contact
                      - Matter
                    description: |
                      Type of parent object:
                      * "Document" represents an existing Clio document. It is specified when you provide a new revision (or document version) to an existing document.
                      * "Folder" represents a specified folder on Clio by folder id. It if specified when you add / move an item to a folder.
                      * "Contact" represents a contact folder on Clio identified by contact id. It is specified when you add / move an item to a contact folder. A contact folder will be created for the specified contact if none exists already.
                      * "Matter" represents a matter folder on Clio identified by matter id. It is specified when you add / move an item to a matter folder.
              received_at:
                type: string
                format: date-time
                description: Date and time the document was received (Expects an ISO-8601
                  timestamp).
              restore:
                type: boolean
                description: Whether or not a trashed Document should be restored.
              uuid:
                type: string
                description: UUID associated with the document version. UUID is required
                  to mark a document fully uploaded.
    multipart/form-data:
      schema:
        type: object
        required:
          - data
        properties:
          data:
            type: object
            properties:
              communication_id:
                type: integer
                format: int64
                description: Related communication record.
              copy_version:
                type: boolean
                description: |-
                  Indicates whether to create a new version with the updated filename on rename. This is intended to handle cases where the document extension has been changed; if the document extension has not changed, no new version will be created.
              document_category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |-
                      The unique identifier for a single DocumentCategory associated with the Document. Use the keyword `null` to specify no association.
              external_properties:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: |-
                        The unique identifier for a single ExternalProperty associated with the Document. The keyword `null` is not valid for this field.
                    name:
                      type: string
                      description: 'The ExternalProperty name. Note: **there is a
                        limit of 5 external_properties per Document**'
                    value:
                      type: string
                      description: The ExternalProperty value.
                    _destroy:
                      type: boolean
                      description: |-
                        The destroy flag. If the flag is set to `true` and the unique identifier of the associated ExternalProperty is present, the ExternalProperty is deleted from the Document.
              fully_uploaded:
                type: boolean
                description: |
                  Indicates whether document is uploaded.

                  When marking the document fully uploaded, it arises errors when:
                  * The file is not successfully uploaded.
                  * Not all the file parts are uploaded.
                  * The document is already marked as fully uploaded.
              multiparts:
                type: array
                items:
                  type: object
                  properties:
                    part_number:
                      type: integer
                      format: int32
                      description: |
                        The part number of multipart upload. It must be an integer between 1 to 10,000, inclusive.

                        Multipart upload supports upload a single file as a set of parts.
                        Each part is a contiguous portion of the data.
                        A `part_number` uniquely identifies a part and also defines its position within the document being uploaded.
                        Each part must be at least 5 MB in size, except the last part.
                        There is no minimum size limit on the last part.

                        The URLs of multipart upload are returned in the field, `put_url`, with the corresponding `multipart`

                        The API handles maximum 50 `multiparts` in one request. If the upload is split to more than 50 parts,
                        make a PUT request with `fully_uploaded` equal to `false`, and another set of part numbers.
                    content_length:
                      type: string
                      description: The size of the part of the upload file in bytes.
                    content_md5:
                      type: string
                      description: |-
                        The base64-encoded 128-bit MD5 digest of the part data. This header can be used as a message integrity check to verify that the part data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check.
              name:
                type: string
                description: Document name.
              parent:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The unique identifier of the parent object.
                  type:
                    type: string
                    enum:
                      - Document
                      - Folder
                      - Contact
                      - Matter
                    description: |
                      Type of parent object:
                      * "Document" represents an existing Clio document. It is specified when you provide a new revision (or document version) to an existing document.
                      * "Folder" represents a specified folder on Clio by folder id. It if specified when you add / move an item to a folder.
                      * "Contact" represents a contact folder on Clio identified by contact id. It is specified when you add / move an item to a contact folder. A contact folder will be created for the specified contact if none exists already.
                      * "Matter" represents a matter folder on Clio identified by matter id. It is specified when you add / move an item to a matter folder.
              received_at:
                type: string
                format: date-time
                description: Date and time the document was received (Expects an ISO-8601
                  timestamp).
              restore:
                type: boolean
                description: Whether or not a trashed Document should be restored.
              uuid:
                type: string
                description: UUID associated with the document version. UUID is required
                  to mark a document fully uploaded.
  required: false
