from typing import Literal, cast

PracticeAreacreateJsonBodyDataCategory = Literal[
    "administrative",
    "admiralty_and_maritime",
    "anti_trust_and_competition",
    "appellate",
    "banking_and_finance",
    "bankruptcy",
    "business_formation_and_compliance",
    "civil_litigation",
    "civil_rights_and_constitutional",
    "collections_and_debt",
    "commercial_and_sale_of_goods",
    "commercial_litigation",
    "construction",
    "consumer_protection",
    "contracts",
    "corporate_litigation",
    "criminal",
    "disability_and_social_security",
    "education",
    "elder",
    "employment_and_labor",
    "energy_and_environmental",
    "ethics",
    "family",
    "food_and_drug",
    "general_practice",
    "government",
    "healthcare",
    "immigration",
    "in_house_counsel",
    "insurance",
    "intellectual_property",
    "international",
    "juvenile",
    "legal_aid",
    "mediation_and_arbitration",
    "medical_malpractice",
    "military",
    "multi_practice",
    "non_profit_and_pro_bono",
    "other",
    "personal_injury",
    "privacy_and_information_security",
    "private_client",
    "product_liability",
    "real_estate",
    "science_and_technology",
    "securities_and_mergers_and_acquisitions",
    "small_claims",
    "sports_and_entertainment_and_gaming",
    "tax",
    "telecommunications",
    "traffic_offenses",
    "transportation",
    "tribal",
    "trusts",
    "wills_and_estates",
    "workers_compensation",
]

PRACTICE_AREACREATE_JSON_BODY_DATA_CATEGORY_VALUES: set[PracticeAreacreateJsonBodyDataCategory] = {
    "administrative",
    "admiralty_and_maritime",
    "anti_trust_and_competition",
    "appellate",
    "banking_and_finance",
    "bankruptcy",
    "business_formation_and_compliance",
    "civil_litigation",
    "civil_rights_and_constitutional",
    "collections_and_debt",
    "commercial_and_sale_of_goods",
    "commercial_litigation",
    "construction",
    "consumer_protection",
    "contracts",
    "corporate_litigation",
    "criminal",
    "disability_and_social_security",
    "education",
    "elder",
    "employment_and_labor",
    "energy_and_environmental",
    "ethics",
    "family",
    "food_and_drug",
    "general_practice",
    "government",
    "healthcare",
    "immigration",
    "in_house_counsel",
    "insurance",
    "intellectual_property",
    "international",
    "juvenile",
    "legal_aid",
    "mediation_and_arbitration",
    "medical_malpractice",
    "military",
    "multi_practice",
    "non_profit_and_pro_bono",
    "other",
    "personal_injury",
    "privacy_and_information_security",
    "private_client",
    "product_liability",
    "real_estate",
    "science_and_technology",
    "securities_and_mergers_and_acquisitions",
    "small_claims",
    "sports_and_entertainment_and_gaming",
    "tax",
    "telecommunications",
    "traffic_offenses",
    "transportation",
    "tribal",
    "trusts",
    "wills_and_estates",
    "workers_compensation",
}


def check_practice_areacreate_json_body_data_category(value: str) -> PracticeAreacreateJsonBodyDataCategory:
    if value in PRACTICE_AREACREATE_JSON_BODY_DATA_CATEGORY_VALUES:
        return cast(PracticeAreacreateJsonBodyDataCategory, value)
    raise TypeError(
        f"Unexpected value {value!r}. Expected one of {PRACTICE_AREACREATE_JSON_BODY_DATA_CATEGORY_VALUES!r}"
    )
